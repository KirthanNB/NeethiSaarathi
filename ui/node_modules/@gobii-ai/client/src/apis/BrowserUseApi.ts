/* tslint:disable */
/* eslint-disable */
/**
 * Gobii API
 * API for Gobii browser automation platform
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AgentDetail,
  CancelTaskConflictResponse,
  CancelTaskResponse,
  PaginatedAgentListList,
  PaginatedTaskListList,
  TaskDetail,
  TaskList,
} from '../models/index';
import {
    AgentDetailFromJSON,
    AgentDetailToJSON,
    CancelTaskConflictResponseFromJSON,
    CancelTaskConflictResponseToJSON,
    CancelTaskResponseFromJSON,
    CancelTaskResponseToJSON,
    PaginatedAgentListListFromJSON,
    PaginatedAgentListListToJSON,
    PaginatedTaskListListFromJSON,
    PaginatedTaskListListToJSON,
    TaskDetailFromJSON,
    TaskDetailToJSON,
    TaskListFromJSON,
    TaskListToJSON,
} from '../models/index';

export interface AssignTaskRequest {
    agentId: string;
    taskDetail?: Omit<TaskDetail, 'id'|'agent_id'|'status'|'created_at'|'updated_at'|'error_message'>;
}

export interface AssignTask2Request {
    taskDetail?: Omit<TaskDetail, 'id'|'agent_id'|'status'|'created_at'|'updated_at'|'error_message'>;
}

export interface CancelTaskRequest {
    agentId: string;
    id: string;
}

export interface CancelTask2Request {
    id: string;
}

export interface CreateAgentRequest {
    agentDetail: Omit<AgentDetail, 'id'|'user_email'|'created_at'|'updated_at'>;
}

export interface DeleteAgentRequest {
    id: string;
}

export interface DeleteTaskRequest {
    agentId: string;
    id: string;
}

export interface DeleteTask2Request {
    id: string;
}

export interface GetAgentRequest {
    id: string;
}

export interface GetTaskRequest {
    agentId: string;
    id: string;
}

export interface GetTask2Request {
    id: string;
}

export interface GetTaskResultRequest {
    agentId: string;
    id: string;
}

export interface GetTaskResult2Request {
    id: string;
}

export interface ListAgentsRequest {
    page?: number;
    pageSize?: number;
}

export interface ListTasksRequest {
    agentId: string;
    page?: number;
    pageSize?: number;
}

export interface UpdateAgentRequest {
    id: string;
    agentDetail: Omit<AgentDetail, 'id'|'user_email'|'created_at'|'updated_at'>;
}

export interface UpdateTaskRequest {
    agentId: string;
    id: string;
    taskDetail?: Omit<TaskDetail, 'id'|'agent_id'|'status'|'created_at'|'updated_at'|'error_message'>;
}

export interface UpdateTask2Request {
    id: string;
    taskDetail?: Omit<TaskDetail, 'id'|'agent_id'|'status'|'created_at'|'updated_at'|'error_message'>;
}

/**
 * 
 */
export class BrowserUseApi extends runtime.BaseAPI {

    /**
     * Override create to handle wait parameter results.
     */
    async assignTaskRaw(requestParameters: AssignTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling assignTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDetailToJSON(requestParameters['taskDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * Override create to handle wait parameter results.
     */
    async assignTask(agentId: string, taskDetail?: TaskDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.assignTaskRaw({ agentId: agentId, taskDetail: taskDetail }, initOverrides);
        return await response.value();
    }

    /**
     * Override create to handle wait parameter results.
     */
    async assignTask2Raw(requestParameters: AssignTask2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDetailToJSON(requestParameters['taskDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * Override create to handle wait parameter results.
     */
    async assignTask2(taskDetail?: TaskDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.assignTask2Raw({ taskDetail: taskDetail }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async cancelTaskRaw(requestParameters: CancelTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelTaskResponse>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling cancelTask().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/{id}/cancel/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelTaskResponseFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async cancelTask(agentId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelTaskResponse> {
        const response = await this.cancelTaskRaw({ agentId: agentId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async cancelTask2Raw(requestParameters: CancelTask2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CancelTaskResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling cancelTask2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/{id}/cancel/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CancelTaskResponseFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async cancelTask2(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CancelTaskResponse> {
        const response = await this.cancelTask2Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async createAgentRaw(requestParameters: CreateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDetail>> {
        if (requestParameters['agentDetail'] == null) {
            throw new runtime.RequiredError(
                'agentDetail',
                'Required parameter "agentDetail" was null or undefined when calling createAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgentDetailToJSON(requestParameters['agentDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async createAgent(agentDetail: AgentDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDetail> {
        const response = await this.createAgentRaw({ agentDetail: agentDetail }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async deleteAgentRaw(requestParameters: DeleteAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async deleteAgent(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAgentRaw({ id: id }, initOverrides);
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async deleteTaskRaw(requestParameters: DeleteTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling deleteTask().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/{id}/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async deleteTask(agentId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTaskRaw({ agentId: agentId, id: id }, initOverrides);
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async deleteTask2Raw(requestParameters: DeleteTask2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTask2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async deleteTask2(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTask2Raw({ id: id }, initOverrides);
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async getAgentRaw(requestParameters: GetAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async getAgent(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDetail> {
        const response = await this.getAgentRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTaskRaw(requestParameters: GetTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getTask().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/{id}/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTask(agentId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.getTaskRaw({ agentId: agentId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTask2Raw(requestParameters: GetTask2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTask2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTask2(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.getTask2Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTaskResultRaw(requestParameters: GetTaskResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling getTaskResult().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskResult().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/{id}/result/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTaskResult(agentId: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.getTaskResultRaw({ agentId: agentId, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTaskResult2Raw(requestParameters: GetTaskResult2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getTaskResult2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/{id}/result/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async getTaskResult2(id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.getTaskResult2Raw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async listAgentsRaw(requestParameters: ListAgentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAgentListList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAgentListListFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async listAgents(page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAgentListList> {
        const response = await this.listAgentsRaw({ page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async listAllTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskListFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async listAllTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskList> {
        const response = await this.listAllTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedTaskListList>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling listTasks().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['page_size'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTaskListListFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async listTasks(agentId: string, page?: number, pageSize?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedTaskListList> {
        const response = await this.listTasksRaw({ agentId: agentId, page: page, pageSize: pageSize }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async updateAgentRaw(requestParameters: UpdateAgentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AgentDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateAgent().'
            );
        }

        if (requestParameters['agentDetail'] == null) {
            throw new runtime.RequiredError(
                'agentDetail',
                'Required parameter "agentDetail" was null or undefined when calling updateAgent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgentDetailToJSON(requestParameters['agentDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgentDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgents.
     */
    async updateAgent(id: string, agentDetail: AgentDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AgentDetail> {
        const response = await this.updateAgentRaw({ id: id, agentDetail: agentDetail }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['agentId'] == null) {
            throw new runtime.RequiredError(
                'agentId',
                'Required parameter "agentId" was null or undefined when calling updateTask().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/agents/browser-use/{agentId}/tasks/{id}/`.replace(`{${"agentId"}}`, encodeURIComponent(String(requestParameters['agentId']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDetailToJSON(requestParameters['taskDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async updateTask(agentId: string, id: string, taskDetail?: TaskDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.updateTaskRaw({ agentId: agentId, id: id, taskDetail: taskDetail }, initOverrides);
        return await response.value();
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async updateTask2Raw(requestParameters: UpdateTask2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTask2().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // tokenAuth authentication
        }

        const response = await this.request({
            path: `/tasks/browser-use/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskDetailToJSON(requestParameters['taskDetail']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskDetailFromJSON(jsonValue));
    }

    /**
     * ViewSet for managing BrowserUseAgentTasks. Supports both agent-specific and user-wide task operations.
     */
    async updateTask2(id: string, taskDetail?: TaskDetail, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskDetail> {
        const response = await this.updateTask2Raw({ id: id, taskDetail: taskDetail }, initOverrides);
        return await response.value();
    }

}
